{
  "diagnostic.errorSign": " ",
  "diagnostic.warningSign": " ",
  // display hover diagnostic everywhere on line, not just at error site
  // "diagnostic.checkCurrentLine": true,
  "coc.preferences.formatOnType": false,
  "coc.preferences.formatOnSaveFiletypes": [
    "json",
    "rust",
    "elixir",
    "eelixir",
    "typescript",
    "typescriptreact",
    "javascript",
    "javascriptreact",
    "crystal",
    "python",
    "ruby"
  ],
  "rust-analyzer.inlayHints.enable": true,
  "rust-analyzer.inlayHints.chainingHints.enable": true,
  "rust-analyzer.inlayHints.typeHints.enable": true,
  "prettier.semi": true,
  "prettier.singleQuote": true,
  "prettier.trailingComma": "es5",
  "prettier.arrowParens": "avoid",
  "typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces": true,
  "typescript.autoClosingTags": false,
  "elixir.pathToElixirLS": "~/.elixir-ls/release/language_server.sh",
  // elixir's formatter can be a bit slow
  "coc.preferences.willSaveHandlerTimeout": 1500,
  "solargraph.useBundler": true,
  "solargraph.formatting": true,
  "solargraph.diagnostics": true,
  "solargraph.bundlerPath": "~/.asdf/shims/bundle",
  // pip3 install --user black isort docformatter
  "diagnostic-languageserver.formatFiletypes": {
    "python": [
      "black",
      "isort",
      "docformatter"
    ]
  },
  "diagnostic-languageserver.formatters": {
    "black": {
      "command": "black",
      "args": [
        "-q",
        "-"
      ]
    },
    "isort": {
      "command": "isort",
      "args": [
        "-q",
        "-"
      ]
    },
    "docformatter": {
      "command": "docformatter",
      "args": [
        "-"
      ]
    }
  },
  "diagnostic-languageserver.linters": {
    // curl -sLO https://raw.githubusercontent.com/clj-kondo/clj-kondo/master/script/install-clj-kondo
    // chmod +x install-clj-kondo
    // ./install-clj-kondo --dir ~/.local/bin
    "clj_kondo_lint": {
      "command": "clj-kondo",
      "debounce": 100,
      "args": [
        "--lint",
        "%filepath"
      ],
      "offsetLine": 0,
      "offsetColumn": 0,
      "sourceName": "clj-kondo",
      "formatLines": 1,
      "formatPattern": [
        "^[^:]+:(\\d+):(\\d+):\\s+([^:]+):\\s+(.*)$",
        {
          "line": 1,
          "column": 2,
          "message": 4,
          "security": 3
        }
      ],
      "securities": {
        "error": "error",
        "warning": "warning",
        "note": "info"
      }
    }
  },
  "diagnostic-languageserver.filetypes": {
    "clojure": "clj_kondo_lint"
  },
  "Lua": {
    "workspace.library": {
      "/usr/share/nvim/runtime/lua": true,
      "/usr/share/nvim/runtime/lua/vim": true,
      "/usr/share/nvim/runtime/lua/vim/lsp": true
    },
    "diagnostics": {
      "globals": [
        "vim"
      ]
    }
  },
  "languageserver": {
    // npm i -g graphql-language-service-cli
    "graphql": {
      "command": "graphql-lsp",
      "args": [
        "server",
        "-m",
        "stream"
      ],
      // to enable in GQL template literals, include these filetypes
      // "filetypes": ["typescript", "typescriptreact", "graphql"]
      "filetypes": [
        "graphql"
      ]
    },
    // brew install ccls
    // --OR--
    // sudo apt install ccls
    "ccls": {
      "command": "ccls",
      "filetypes": [
        "c",
        "cc",
        "cpp",
        "c++",
        "objc",
        "objcpp"
      ],
      "rootPatterns": [
        ".ccls",
        "compile_commands.json",
        ".git/",
        ".hg/"
      ],
      "initializationOptions": {
        "highlight": {
          "lsRanges": true
        }, // needed by vim-lsp-cxx-highlight
        "cache": {
          "directory": "/tmp/ccls"
        }
      }
    },
    // (linux)
    // wget https://github.com/elbywan/crystalline/releases/latest/download/crystalline_x86_64-unknown-linux-gnu.gz -O crystalline.gz && \
    // gzip -d crystalline.gz && \
    // chmod u+x crystalline
    //
    // (macos)
    // curl -L https://github.com/elbywan/crystalline/releases/latest/download/crystalline_x86_64-apple-darwin.gz -o crystalline.gz &&\
    // gzip -d crystalline.gz &&\
    // chmod u+x crystalline
    "crystal": {
      "command": "crystalline",
      "args": [
        "--stdio"
      ],
      "filetypes": [
        "crystal"
      ]
    },
    // git clone --recurse-submodules https://github.com/zigtools/zls
    // cd zls
    // zig build -Drelease-safe
    // mv zig-out/bin/zls ~/.local/bin/zls
    "zls": {
      "command": "zls",
      "filetypes": [
        "zig"
      ]
    },
    // opam install ocaml-lsp-server
    "ocaml-lsp": {
      "command": "opam",
      "args": [
        "config",
        "exec",
        "--",
        "ocamllsp"
      ],
      "filetypes": [
        "ocaml",
        "reason"
      ]
    }
  }
}
